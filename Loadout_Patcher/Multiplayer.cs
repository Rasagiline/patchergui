/*******************************************************************************
 * Loadout_Patcher
 * 
 * Copyright (c) 2025 Rasagiline
 * GitHub: https://github.com/Rasagiline
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Loadout_Patcher
{
    /// <summary>
    /// Multiplayer is currently for making the user unique for online activities that involve multiple users
    /// </summary>
    public abstract class Multiplayer
    {
        private const bool available = false;

        public static string? Username { get; set; } // The username the user was asked for

        private static long playerId;

        public static long PlayerId // Auto-generated ID or manually inserted Steam ID (steamID64)
        {
            get { return playerId; }
            set { playerId = value; }
        }

        private static string? ipAddress;

        public static string? IpAddress // IP address, either the one connected to the internet or localhost
        {
            get { return ipAddress; }
            set { ipAddress = value; }
        }

        /// <summary>
        /// Finds out the internet connected IP address and sets it
        /// </summary>
        public static void FindOutAndSetIpAddress()
        {
            using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
            {
                socket.Connect("8.8.8.8", 65530);
                IPEndPoint? endPoint = socket.LocalEndPoint as IPEndPoint;
                if (endPoint != null)
                {
                    IpAddress = endPoint.Address.ToString();
                }
            }
        }

        /// <summary>
        /// Produces a random player ID and sets it
        /// </summary>
        public static void AutoGeneratePlayerId()
        {
            long autoGeneratedPlayerId = new Random().NextInt64();

            PlayerId = autoGeneratedPlayerId;
        }

        /// <summary>
        /// Loads save file information into multiplayer properties such as the username
        /// </summary>
        /// <param name="saveFile"></param>
        public static void LoadSaveFileIntoMultiplayerProperties(Filesave.SaveFile saveFile)
        {
            // A check if content is there. Nothing can be set if there is nothing
            if (saveFile.Username != "")
            {
                Username = saveFile.Username;
            }
            if (saveFile.PlayerId != 0)
            {
                PlayerId = saveFile.PlayerId;
            }
            if (saveFile.IpAddress != "" && saveFile.IpAddress != null)
            {
                IpAddress = saveFile.IpAddress;
            }
        }

        public static void SynchronizeSaveFile(ref Filesave.SaveFile saveFile)
        {
            if (Username != "")
            {
                saveFile.Username = Username!;
            }
            if (PlayerId != 0)
            {
                saveFile.PlayerId = PlayerId;
            }
            if (IpAddress != "")
            {
                saveFile.IpAddress = IpAddress!;
            }
        }
    }
}
